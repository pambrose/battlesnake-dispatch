/*
 * Copyright Â© 2020 Paul Ambrose (pambrose@mac.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java'
  id 'maven'
  id 'org.jetbrains.kotlin.jvm' version '1.4.10'
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.10'
  id "com.github.ben-manes.versions" version "0.33.0"
}

repositories {
  maven { url 'https://kotlin.bintray.com/ktor' }
  maven { url "https://kotlin.bintray.com/kotlinx" }
  maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
  maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
  jcenter()
}

sourceCompatibility = 1.8

description = 'battlesnake-quickstart'
group = 'io.battlesnake'
version = '0.8.0'

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"

  implementation "io.ktor:ktor-server-cio:$ktor_version"
  implementation "io.ktor:ktor-server-core:$ktor_version"
  implementation "io.ktor:ktor-html-builder:$ktor_version"
  implementation "io.ktor:ktor-serialization:$ktor_version"

  testImplementation "io.ktor:ktor-server-tests:$ktor_version"

  implementation "io.github.microutils:kotlin-logging:${logging_version}"
  implementation "ch.qos.logback:logback-classic:${logback_version}"
  implementation "org.slf4j:jul-to-slf4j:${slf4j_version}"

  testImplementation "org.amshove.kluent:kluent:${kluent_version}"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

compileKotlin {
  kotlinOptions.jvmTarget = '1.8'
  kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                     '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI']
}

compileTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
  kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                     '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI']
}

test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams = true
  }
}